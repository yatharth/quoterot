import path, {join} from 'path'
import fs from 'fs'
import {resolve} from 'app-root-path'
import {Function} from '@aws-cdk/aws-lambda'

const secretsFolder = resolve('secrets/')


// Q: WHY DON’T I USE AWS SECRETS MANAGER?
//
// I could have used AWS Secrets Manager. However, I don’t. The CDK library (@aws-cdk/aws-secretsmanager) doesn’t
//  let you create or update the value of a secret from pre-existing strings. This supposedly to prevent people
//  from accidentally committing strings to code. This is frustrating. So I’d have to update AWS secrets using a
//  a companion script. Even if I did, the convention is for the lambdas to read the secrets passed in through an
//  environment variable anyway. So at that point, I would be storing secrets locally, having a companion script
//  upload them to AWS Secrets, then pull then from my CDK infrastructure code, only to pass them as environment
//  variables. At that point, I can just read the secrets locally and pass them in as local environment variables
//  directly. So that’s what I do.
//
// Q: SO WHAT DO I DO INSTEAD?
//
// I stored the secrets in a local folder secrets/, not committed to the repo.
//
// Code is NOT allowed to read from this folder directly. Otherwise, code meant to be called by a lambda might
//  try to read from a secrets/ folder that is not present on the remote serverless environment.
//
// Instead, the CDK infrastructure code can request secrets be passed in to lambdas with environment variables as
//  needed. When running locally, just make sure the variables are already loaded in your environment. If you run
//  via the `npm run` scripts, this will be taken care of automatically.


// WARNING: Functions inside lambdas cannot use this, as there won’t be a secrets/ folder uploaded to AWS.
//
// That’s why this function isn’t exposed. ONLY code used in defining the infrastructure stack should use this,
//  even then, only through the `passLocalSecretToLambda()` function.
//
// All other code should read secrets from the environment. This provides a deployment-agnostic way to read
//  these secrets, whether on the local machine or on AWS.
//
function readLocalSecret(secretName: string) {
    const secretFilename = join(secretsFolder, secretName)
    const secret = fs.readFileSync(secretFilename, 'utf8').trim()
    if (!secret) throw `Secret ${secretName} was empty.`
    return secret
}

export function passLocalSecretToFunction(lambda: Function, secretName: string) {
    const secret = readLocalSecret(secretName)
    lambda.addEnvironment(secretName, secret)
}

export function passLocalSecretsToFunction(lambda: Function, secretNames: string[]) {
    secretNames.forEach(secretName => passLocalSecretToFunction(lambda, secretName))
}

export function passAllLocalSecretsToFunction(lambda: Function) {

    const isFile = (file: string) => fs.lstatSync(file).isFile()
    const isHidden = (file: string) => /^\./.test(file)
    const hasExtension = (file: string) => path.extname(file)

    const isSecretFile = (file: string) => isFile(file) && !isHidden(file) && !hasExtension(file)

    const filesInSecretsFolder = fs.readdirSync(secretsFolder)
    const secretFiles = filesInSecretsFolder.filter(isSecretFile)

    passLocalSecretsToFunction(lambda, secretFiles)

}
